" =============================================================================
"       VIM-PLUG SETTINGS
" =============================================================================

call plug#begin('~/.vim/plugged')

Plug 'xoria256.vim'
Plug 'kien/ctrlp.vim'
Plug 'Lokaltog/vim-easymotion'
Plug 'tpope/vim-fugitive'
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'scrooloose/syntastic'
Plug 'Valloric/YouCompleteMe', {'for': 'cpp'}
Plug 'Yggdroot/indentLine'
Plug 'wting/rust.vim', {'for': 'rust'}
Plug 'tikhomirov/vim-glsl', {'for': 'glsl'}
Plug 'itchyny/lightline.vim'
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

call plug#end()

" =============================================================================
"       VIM SETTINGS
" =============================================================================

" Nobody cares about vi compatibility.
set nocompatible

" Filetype detection, plugins, and indenting.
filetype plugin indent on

" Hybrid line numbers.
set relativenumber
set number

" Tabbing options.
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set smarttab

" Syntax highlighting options.
syntax on
set background=dark
set synmaxcol=2048

" Color scheme.
colorscheme xoria256

" Highlight current line, but only in the active window.
augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

" Search/find options.
set wrapscan
set ignorecase
set smartcase
set hlsearch
set incsearch
set path=.,/usr/include/**,/usr/local/include/**

" Use forward slashes in paths regardless of the OS.
set shellslash

" Use the visual bell instead of beeping like crazy.
" set visualbell

" Allow backspacing over indents, end-of-line, and the start of insert.
set backspace=indent,eol,start

" Let the cursor go into invalid places.
set virtualedit=all

" Allow hidden buffers so unsaved buffers can go in the background.
set hidden

" Use a $ to mark the end of a word when changing it.
set cpoptions=cesB$

" Status line options (lightline handles this now).
set laststatus=2
"set statusline=\ %{fugitive#statusline()}\ %f\ %m\ %r%=%l/%L\ <%c>\ [%p%%]\ 

" Lazy redraw for efficiency.
set lazyredraw

" Show the command helper and current mode.
set showcmd
set showmode

" Multi-key macro timeout.
set timeoutlen=750

" Amount of history to keep around.
set history=100

" Keep some context around where we're scrolling.
set scrolloff=5
set sidescrolloff=10

" Completion options.
set wildmenu
set complete=.,w,b,t,i
set showfulltag
set tags=./tags,tags

" Various line wrapping and line width settings.
set nowrap
set colorcolumn=81
highlight ColorColumn ctermbg=235

" Fillchars and folding are dumb.
set fillchars=""
set nofoldenable

" =============================================================================
"       KEY MAPPINGS 
" =============================================================================
" Thanks to Derek Wyatt for a bunch of these!

" Toggle paste mode.
nmap <silent> ,p :set invpaste<CR>:set paste?<CR>

" Turn off highlight search.
nmap <silent> ,n :set invhls<CR>:set hls?<CR>

" Toggle text wrapping. 
nmap <silent> ,w :set invwrap<CR>:set wrap?<CR>

" Maps to make handling windows a bit easier.
noremap <silent> ,h :wincmd h<CR>
noremap <silent> ,j :wincmd j<CR>
noremap <silent> ,k :wincmd k<CR>
noremap <silent> ,l :wincmd l<CR>
noremap <silent> ,sb :wincmd p<CR>
noremap <silent> <C-F9>  :vertical resize -5<CR>
noremap <silent> <C-F10> :resize +4<CR>
noremap <silent> <C-F11> :resize -4<CR>
noremap <silent> <C-F12> :vertical resize +5<CR>

" Map CTRL-E to do what ',' used to do.
nnoremap <c-e> ,
vnoremap <c-e> ,

" Edit the vimrc file.
nmap <silent> ,ev :e $MYVIMRC<CR>
nmap <silent> ,sv :so $MYVIMRC<CR>

" Make horizontal scrolling easier.
nmap <silent> <C-o> 10zl
nmap <silent> <C-i> 10zh

" Highlight all instances of the current word under the cursor.
nmap <silent> ^ :setl hls<CR>:let @/="<C-r><C-w>"<CR>

" Search the current file for what's currently in the search register and
" display matches.
nmap <silent> ,gs
     \ :vimgrep /<C-r>// %<CR>:ccl<CR>:cwin<CR><C-W>J:set nohls<CR>

" Search the current file for the word under the cursor and display matches.
nmap <silent> ,gw
     \ :vimgrep /<C-r><C-w>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:set nohls<CR>

" Search the current file for the WORD under the cursor and display matches.
nmap <silent> ,gW
     \ :vimgrep /<C-r><C-a>/ %<CR>:ccl<CR>:cwin<CR><C-W>J:set nohls<CR>

" Swap two words.
nmap <silent> gw :s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR>`'

" Underline the current line with '='.
nmap <silent> ,ul :t.\|s/./=/g\|set nohls<CR>

" Delete all buffers.
nmap <silent> ,da :exec "1," . bufnr('$') . "bd"<CR>

" =============================================================================
"       NERD TREE SETTINGS 
" =============================================================================

" Open/close NERD Tree with F2.
nmap <F2> :NERDTreeToggle<CR>
nmap <S-F2> :NERDTreeClose<CR>

" =============================================================================
"       EASY MOTION SETTINGS
" =============================================================================

" Rather than pollute the whole keyspace, use ,m as the trigger.
let g:EasyMotion_leader_key=',m'

" =============================================================================
"       CTRLP SETTINGS
" =============================================================================

" Run in mixed mode by default.
let g:ctrlp_cmd='CtrlPMixed'

" Put the cache directory in a tmps RAM disk.
let g:ctrlp_cache_dir='/tmp/ctrlp-cache'

" =============================================================================
"       INDENTLINE SETTINGS
" =============================================================================

" Use soft gray color.
let g:indentLine_color_term = 238

" Make them a solid bar.
let g:indentLine_char = 'â”‚'
